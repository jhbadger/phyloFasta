#!/usr/bin/env ruby

$VERBOSE = nil

def required_gems(array)
  array.each do |item|
    begin
      require item
    rescue LoadError
      item = "newick-ruby" if item=="Newick"
      STDERR << "Gem #{item} missing. You need to gem install #{item}\n"
      exit(1)
    end
  end
end

def required_programs(array)
  array.each do |item|
      prog = `which #{item}`
      if prog == ""
        STDERR << "You don't have #{item} on your path, but it is required\n"
        exit(1)
      end
  end
end

required_gems ['rubygems', 'trollop', 'bio', 'Newick', 'fpdf']
required_programs ['quicktree']

origARGV = ARGV.dup # keep unparsed copy for grid

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "fasta alignment(s)", :required =>true, :type =>:strings
  opt :bootstrap, "number of bootstraps (or 0 to not bootstrap)", :default=>100, :type=>:integer
  opt :distance, "output distance matrix rather than tree"
  opt :outgroup, "use specified taxon as outgroup", :type=>:string
  opt :unrooted, "leave tree unrooted"
  opt :project, "run on grid with project number specified", :type=>:string
end

if opts.project
  cmd = $0
  keys = opts.keys - [:help, :input, :project]
  keys.each do |key|
    k = key.to_s
    val = opts[key]
    if val.is_a?(Array)
      val = val.join(" ")
    end
    cmd += " --#{key} #{val}" if !k.index("_given") && val
  end
  opts.input.each do |input|
    system("qsub -P #{opts.project} -cwd " + cmd + 
           " --input #{input}")
  end
  exit(0)
end


# is a fasta file DNA?
def isDNA?(fasta)
   seq = File.read(fasta, 10000).split("\n").grep(/^[^>]/).join
   seq.count("AGTCNU-").to_f / seq.length > 0.90
end

# provide aliased fasta name so programs like PHYLIP don't get confused by long names
def aliasFasta(fasta, ali, out, outgroup = nil)
   outFile = File.new(out, "w")
   aliFile = File.new(ali, "w") if (!ali.nil?)
   aliHash = Hash.new
   orfNum = "SID0000001"
   Bio::FlatFile.new(Bio::FastaFormat, File.new(fasta)).each do |seq|
      newName = orfNum
      name = seq.definition.split(" ").first
      newName = "SID0000000" if (outgroup == name)
      aliFile.printf("%s\t%s\n", newName, seq.definition) if (ali)
      aliHash[newName] = seq.definition.tr("(),:","_")
      seq.definition = newName
      outFile.print seq
      orfNum = orfNum.succ if (outgroup != name)
   end
   outFile.close
   aliFile.close if (ali)
   return aliHash
end

# produces stock format needed for quicktree from fastaFormat
def fasta2Stockholm(alignFile)
   stock = alignFile + ".stock"
   stockf = File.new(stock, "w")
   stockf.printf("# STOCKHOLM 1.0\n")
   align = Hash.new
   aSize = 0
   nSize = 0
   Bio::FlatFile.new(Bio::FastaFormat, File.new(alignFile)).each do |seq|
      name = headerName(seq.definition)
      align[name] = seq.seq
      aSize = seq.seq.length
      nSize = name.size if (nSize < name.size)
   end
   0.step(aSize, 50) do |i|
      stockf.printf("\n")
      align.keys.sort.each do |key|
         stockf.printf("%-#{nSize}s %s\n", key, align[key][i..i+49])
      end
   end
   stockf.printf("//\n")
   stockf.close
   stock
end

#returns first word from header
def headerName(header)
   begin
      header.split(" ")[0]
   rescue
      ""
   end
end

# cleans up temporary files
def cleanup(dir)
  Dir.glob(dir+"/*").each do |file|
    File.unlink(file)
  end
  Dir.unlink(dir)
end

# main program loop
opts.input.each do |fasta|
  dna = isDNA?(fasta)
  if (dna)
    STDERR << "quicktree only handles proteins\n"
    exit(1)
  end
  name = File.basename(fasta).split(".").first
  tmpdir = ENV["HOME"] + "/.tmp"
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tmpdir += "/" + name + "_" + Time.now.to_f.to_s
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tname = tmpdir + "/" + name
  aliHash = aliasFasta(fasta, nil, tname, opts.trim)
  stock = fasta2Stockholm(tname)
  if (opts.bootstrap > 0)
    boot = "-b #{opts.bootstrap}"
  else
    boot = ""
  end
  if (opts.distance)
    system("quicktree -out m #{stock} > #{name}_quick.dist")
  else
    system("cd #{tmpdir};quicktree #{boot} #{stock} > #{tmpdir}/quick.tree")
    tree = NewickTree.fromFile("#{tmpdir}/quick.tree")
    tree.unAlias(aliHash)
    if (opts.outgroup)
      outNode = tree.findNode(opts.outgroup)
      if (outNode.nil?)
        STDERR.printf("taxon #{opts.outgroup} not found in tree!\n")
      elsif (!opts.unrooted)
        tree = tree.reroot(outNode)
      end 
    else
      tree = tree.midpointRoot
    end  
    tree.write("#{name}_quick.tree")
    tree.draw("#{name}_quick.tree.pdf")
  end
  cleanup(tmpdir)
end
