#!/usr/bin/env ruby

$VERBOSE = nil

def required_gems(array)
  array.each do |item|
    begin
      require item
    rescue LoadError
      item = "newick-ruby" if item=="Newick"
      STDERR << "Gem #{item} missing. You need to gem install #{item}\n"
      exit(1)
    end
  end
end

def required_programs(array)
  array.each do |item|
      prog = `which #{item}`
      if prog == ""
        STDERR << "You don't have #{item} on your path, but it is required\n"
        exit(1)
      end
  end
end

required_gems ['rubygems', 'trollop', 'bio', 'Newick', 'fpdf']
required_programs ['phyml']

origARGV = ARGV.dup # keep unparsed copy for grid

ARGV.push("--help") if ARGV.empty?
opts = Trollop::options do
  banner File.basename($0)
  opt :input, "fasta alignment(s)", :required =>true, :type =>:strings
  opt :bootstrap, "number of bootstraps (or 0 to use fast SH-like branch supports)", :default=>0, :type=>:integer
  opt :model, "model (default: GTR, WAG)", :type=>:string
  opt :outgroup, "use specified taxon as outgroup", :type=>:string
  opt :unrooted, "leave tree unrooted"
  opt :project, "run on grid with project number specified", :type=>:string
  opt :tmpdir, "temporary directory", :default=>tmpdir = ENV["HOME"] + "/.tmp"
end

if opts.project
  cmd = $0
  keys = opts.keys - [:help, :input, :project]
  keys.each do |key|
    k = key.to_s
    val = opts[key]
    if val.is_a?(Array)
      val = val.join(" ")
    end
    cmd += " --#{key} #{val}" if !k.index("_given") && val
  end
  opts.input.each do |input|
    system("qsub -P #{opts.project} -cwd " + cmd + 
           " --input #{input}")
  end
  exit(0)
end

# is a fasta file DNA?
def isDNA?(fasta)
  seq = File.read(fasta, 10000).split("\n").grep(/^[^>]/).join
  seq.upcase.count("ACTGNU").to_f / seq.upcase.count("ACDEFGHIKLMNPQRSTVWYZ") > 0.90
end

# provide aliased fasta name so programs like PHYLIP don't get confused by long names
def aliasFasta(fasta, ali, out, outgroup = nil)
   outFile = File.new(out, "w")
   aliFile = File.new(ali, "w") if (!ali.nil?)
   aliHash = Hash.new
   orfNum = "SID0000001"
   Bio::FlatFile.new(Bio::FastaFormat, File.new(fasta)).each do |seq|
      newName = orfNum
      name = seq.definition.split(" ").first
      newName = "SID0000000" if (outgroup == name)
      aliFile.printf("%s\t%s\n", newName, seq.definition) if (ali)
      aliHash[newName] = seq.definition.tr("(),:","_")
      seq.definition = newName
      outFile.print seq
      orfNum = orfNum.succ if (outgroup != name)
   end
   outFile.close
   aliFile.close if (ali)
   return aliHash
end

# converts fasta to phylip format
def fasta2Phylip(alignFile, phyFile)
  seqs = Hash.new
  name = nil
  inFile = File.new(alignFile)
  inFile.each do |line|
    line.chomp!
    line.tr!("*","")
    if line =~ /^>/
      name = line[1..line.length].split(";").pop
      seqs[name] = ""
    else
      seqs[name] += line.gsub(".","-")
    end
  end
  inFile.close
  phy = File.new(phyFile, "w")
  lineLen = 60
  phy.printf("%d %d\n", seqs.size, seqs[name].length)
  pos = 0
  while (pos < seqs[name].length)
    seqs.keys.sort.each do |name|
      if pos == 0
        phy.printf("%-10s ", name)
      end
      phy.printf("%s\n", seqs[name][pos..pos + lineLen - 1])
    end
    pos += lineLen
    phy.printf("\n")
  end
  phy.close
end

# cleans up temporary files
def cleanup(dir)
  Dir.glob(dir+"/*").each do |file|
    File.unlink(file)
  end
  Dir.unlink(dir)
end

# main program loop
opts.input.each do |fasta|
  name = File.basename(fasta).split(".").first
  Dir.mkdir(opts.tmpdir) if !File.exists?(opts.tmpdir)
  tmpdir = opts.tmpdir + "/" + name + "_" + Time.now.to_f.to_s
  Dir.mkdir(tmpdir) if !File.exists?(tmpdir)
  tname = tmpdir + "/" + name
  dna = isDNA?(fasta)
  model = opts.model
  if (!model)
    if (dna)
      model = "GTR"
      data = "nt"
    else
      model = "WAG"
      data = "aa"
    end
  end
  aliHash = aliasFasta(fasta, nil, tname, opts.trim)
  fasta2Phylip(tname, tname + ".phy")
  if (opts.bootstrap > 0)
    boot = "-b #{opts.bootstrap}"
  else
    boot = "-b -4"
  end
  system("cd #{tmpdir};phyml --no_memory_check -d #{data} -m #{model} #{boot} -i #{tname}.phy")
  tree = NewickTree.fromFile("#{tmpdir}/#{name}.phy_phyml_tree.txt")
  tree.unAlias(aliHash)
  if (opts.outgroup)
    outNode = tree.findNode(opts.outgroup)
    if (outNode.nil?)
      STDERR.printf("taxon #{opts.outgroup} not found in tree!\n")
    else
      tree = tree.reroot(outNode)
    end 
  elsif (!opts.unrooted)
    tree = tree.midpointRoot
  end  
  tree.write("#{name}_phyml.tree")
  tree.draw("#{name}_phyml.tree.pdf")
  system("cp #{tmpdir}/#{name}.phy_phyml_stats.txt #{name}_phyml_stats.txt")
  cleanup(tmpdir)
end
